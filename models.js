// Generated by CoffeeScript 1.4.0
var Client, DbManager, helpers,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Client = require('request-json').JsonClient;

helpers = require('./helpers');

DbManager = (function() {

  function DbManager() {
    this.dbClient = new Client("http://localhost:9101/");
    this.name = process.env.NAME;
    this.token = process.env.TOKEN;
    if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
      this.dbClient.setBasicAuth(this.name, this.token);
    }
  }

  DbManager.prototype.all = function(callback) {
    var path;
    path = "request/" + (this.type.toLowerCase()) + "/all/";
    return this.dbClient.post(path, {}, function(err, response, models) {
      if (err) {
        return callback(err);
      } else if (response.statusCode !== 200) {
        return callback(new Error(models));
      } else {
        return callback(null, models);
      }
    });
  };

  DbManager.prototype.create = function(model, callback) {
    var _this = this;
    model.docType = this.type;
    return this.dbClient.post("data/", model, function(err, response, model) {
      if (err) {
        return callback(err, 500);
      } else if (response.statusCode !== 201) {
        return callback(new Error("Error occured"), response.statusCode);
      } else {
        return callback(null, 201, model);
      }
    });
  };

  DbManager.prototype.merge = function(model, data, callback) {
    var _this = this;
    return this.dbClient.put("data/merge/" + model._id + "/", data, function(err, res, body) {
      if (err) {
        return callback(err);
      } else if (res.statusCode === 404) {
        return callback(new Error("Model does not exist"));
      } else if (res.statusCode !== 200) {
        return callback(new Error(body));
      } else {
        return callback(null);
      }
    });
  };

  DbManager.prototype.deleteAll = function(callback) {
    var path;
    path = "request/" + (this.type.toLowerCase()) + "/all/destroy/";
    return this.dbClient.put(path, {}, function(err, response) {
      if (err) {
        return callback(err);
      } else if (response.statusCode !== 204) {
        return callback(new Error("Server error"));
      } else {
        return callback(null);
      }
    });
  };

  return DbManager;

})();

exports.UserManager = (function(_super) {

  __extends(UserManager, _super);

  function UserManager() {
    return UserManager.__super__.constructor.apply(this, arguments);
  }

  UserManager.prototype.type = 'User';

  UserManager.prototype.isValid = function(user) {
    if ((user.password != null) && user.password.length > 4) {
      if (helpers.checkMail(user.email)) {
        this.error = null;
        return true;
      } else {
        this.error = 'Wrong email format';
        return false;
      }
    } else {
      this.error = 'Password is too short';
      return false;
    }
  };

  UserManager.prototype.getUser = function(callback) {
    return this.all(function(err, users) {
      if (err) {
        return callback(err);
      } else if (users.length === 0) {
        return callback(null, null);
      } else {
        return callback(null, users[0]);
      }
    });
  };

  return UserManager;

})(DbManager);

exports.InstanceManager = (function(_super) {

  __extends(InstanceManager, _super);

  function InstanceManager() {
    return InstanceManager.__super__.constructor.apply(this, arguments);
  }

  InstanceManager.prototype.type = 'CozyInstance';

  return InstanceManager;

})(DbManager);
