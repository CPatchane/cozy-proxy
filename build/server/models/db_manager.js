// Generated by CoffeeScript 1.7.1
var Client, DbManager, helpers;

Client = require('request-json').JsonClient;

helpers = require('../lib/helpers');

module.exports = DbManager = (function() {
  function DbManager() {
    this.dbClient = new Client("http://localhost:9101/");
    this.name = process.env.NAME;
    this.token = process.env.TOKEN;
    if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
      this.dbClient.setBasicAuth(this.name, this.token);
    }
  }

  DbManager.prototype.all = function(callback) {
    var path;
    path = "request/" + (this.type.toLowerCase()) + "/all/";
    return this.dbClient.post(path, {}, (function(_this) {
      return function(err, response, models) {
        if (err) {
          return callback(err);
        } else if (response.statusCode !== 200) {
          return callback(new Error(models));
        } else {
          return callback(null, models);
        }
      };
    })(this));
  };

  DbManager.prototype.create = function(model, callback) {
    model.docType = this.type;
    return this.dbClient.post("data/", model, (function(_this) {
      return function(err, response, model) {
        if (err) {
          return callback(err, 500);
        } else if (response.statusCode !== 201) {
          return callback(new Error("Error occured"), response.statusCode);
        } else {
          return callback(null, 201, model);
        }
      };
    })(this));
  };

  DbManager.prototype.merge = function(model, data, callback) {
    return this.dbClient.put("data/merge/" + model._id + "/", data, (function(_this) {
      return function(err, res, body) {
        if (err) {
          return callback(err);
        } else if (res.statusCode === 404) {
          return callback(new Error("Model does not exist"));
        } else if (res.statusCode !== 200) {
          return callback(new Error(body));
        } else {
          return callback(null);
        }
      };
    })(this));
  };

  DbManager.prototype.deleteAll = function(callback) {
    var path;
    path = "request/" + (this.type.toLowerCase()) + "/all/destroy/";
    return this.dbClient.put(path, {}, function(err, response) {
      if (err) {
        return callback(err);
      } else if (response.statusCode !== 204) {
        return callback(new Error("Server error"));
      } else {
        return callback(null);
      }
    });
  };

  return DbManager;

})();
